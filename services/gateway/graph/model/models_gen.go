// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Class struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	User *User  `json:"user"`
}

type Classifier struct {
	Type        *Type  `json:"type"`
	Class       *Class `json:"class"`
	ParentTask  *Task  `json:"parentTask"`
	ParentEvent *Event `json:"parentEvent"`
}

type Edit struct {
	Name        *string `json:"name"`
	Description *string `json:"description"`
	StartTime   *int    `json:"startTime"`
	EndTime     *int    `json:"endTime"`
}

type Event struct {
	ID          string      `json:"id"`
	Name        string      `json:"name"`
	Description *string     `json:"description"`
	StartTime   int         `json:"startTime"`
	EndTime     int         `json:"endTime"`
	Status      EventStatus `json:"status"`
	User        *User       `json:"user"`
	Classifier  *Classifier `json:"classifier"`
	Related     *Related    `json:"related"`
}

type NewEvent struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
	StartTime   int     `json:"startTime"`
	EndTime     int     `json:"endTime"`
}

type NewTask struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
	StartTime   *int    `json:"startTime"`
	EndTime     *int    `json:"endTime"`
}

type Related struct {
	Task  []*Task  `json:"task"`
	Event []*Event `json:"event"`
}

type Task struct {
	ID          string      `json:"id"`
	Name        string      `json:"name"`
	Description *string     `json:"description"`
	StartTime   *int        `json:"startTime"`
	EndTime     *int        `json:"endTime"`
	Status      TaskStatus  `json:"status"`
	User        *User       `json:"user"`
	Classifier  *Classifier `json:"classifier"`
	Related     *Related    `json:"related"`
}

type Type struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	User *User  `json:"user"`
}

type User struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type EventStatus string

const (
	EventStatusPlanned   EventStatus = "PLANNED"
	EventStatusVisited   EventStatus = "VISITED"
	EventStatusMissed    EventStatus = "MISSED"
	EventStatusPostponed EventStatus = "POSTPONED"
)

var AllEventStatus = []EventStatus{
	EventStatusPlanned,
	EventStatusVisited,
	EventStatusMissed,
	EventStatusPostponed,
}

func (e EventStatus) IsValid() bool {
	switch e {
	case EventStatusPlanned, EventStatusVisited, EventStatusMissed, EventStatusPostponed:
		return true
	}
	return false
}

func (e EventStatus) String() string {
	return string(e)
}

func (e *EventStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EventStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EventStatus", str)
	}
	return nil
}

func (e EventStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TaskStatus string

const (
	TaskStatusAssigned    TaskStatus = "ASSIGNED"
	TaskStatusFulfilled   TaskStatus = "FULFILLED"
	TaskStatusUnfulfilled TaskStatus = "UNFULFILLED"
	TaskStatusDeleted     TaskStatus = "DELETED"
)

var AllTaskStatus = []TaskStatus{
	TaskStatusAssigned,
	TaskStatusFulfilled,
	TaskStatusUnfulfilled,
	TaskStatusDeleted,
}

func (e TaskStatus) IsValid() bool {
	switch e {
	case TaskStatusAssigned, TaskStatusFulfilled, TaskStatusUnfulfilled, TaskStatusDeleted:
		return true
	}
	return false
}

func (e TaskStatus) String() string {
	return string(e)
}

func (e *TaskStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskStatus", str)
	}
	return nil
}

func (e TaskStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
